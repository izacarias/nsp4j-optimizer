plugins {
    id 'java'
    id 'application'
}

group = 'de.tubs'
version = '1.4.1'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Gurobi Optimizer
    implementation name: 'gurobi'
    
    // Spark Java
    implementation 'com.sparkjava:spark-core:2.9.4'
    
    // GSON
    implementation 'com.google.code.gson:gson:2.10'
    
    // Decimal4j
    implementation 'org.decimal4j:decimal4j:1.0.3'
    
    // DeepLearning4J
    implementation 'org.deeplearning4j:deeplearning4j-core:0.9.1'
    
    // Eclipse Collections
    implementation 'org.eclipse.collections:eclipse-collections-api:10.2.0'
    implementation 'org.eclipse.collections:eclipse-collections:10.2.0'
    
    // SLF4J
    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'org.slf4j:slf4j-simple:2.0.6'
    
    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.1'
    
    // GraphStream
    implementation 'org.graphstream:gs-core:1.3'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    
    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

application {
    mainClass = 'optimizer.Launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    // Skip tests by default, matching Maven configuration
    enabled = !Boolean.getBoolean('skipTests')
}

// Create a fat JAR with dependencies
tasks.register('fatJar', Jar) {
    archiveClassifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes 'Main-Class': 'optimizer.Launcher'
    }
    
    from sourceSets.main.output
    
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.build.dependsOn fatJar 